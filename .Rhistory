simulate_data_scenario1 <- function(N, n_obs) {
x <- runif(N, -1, 1)
y <- vector("list", N)
mu_at_c <- base_mu_below + slope_mu_below * c_cutoff
sigma_at_c <- base_sigma_below + slope_sigma_below * c_cutoff
for (i in seq_len(N)) {
if (x[i] < c_cutoff) {
mu <- rnorm(1, mean = base_mu_below + slope_mu_below * x[i], sd = 1)
sigma <- abs(rnorm(1, mean = base_sigma_below + slope_sigma_below * x[i], sd = 0.5))
} else {
mu <- rnorm(1, mean = mu_at_c + delta_mu, sd = 1)
sigma <- abs(rnorm(1, mean = sigma_at_c + delta_sigma, sd = 0.5))
}
y[[i]] <- rnorm(n_obs, mean = mu, sd = sigma)
}
list(x = x, y = y)
}
true_treatment_effect_scenario1 <- function(q_levels) {
mu_at_c <- base_mu_below + slope_mu_below * c_cutoff
sigma_at_c <- base_sigma_below + slope_sigma_below * c_cutoff
mu_below <- mu_at_c
sigma_below <- sigma_at_c
mu_above <- mu_below + delta_mu
sigma_above <- sigma_below + delta_sigma
q_below <- qnorm(q_levels, mean = mu_below, sd = sigma_below)
q_above <- qnorm(q_levels, mean = mu_above, sd = sigma_above)
q_above - q_below
}
test_that("Scenario 1 distribution test => simple & frechet have finite bias", {
set.seed(108)
n_rep <- 5
N <- 80
n_obs <- 30
q_levels <- seq(0.01, 0.9, by = 0.1)
true_te <- true_treatment_effect_scenario1(q_levels)
results_simp <- list()
results_frech <- list()
for (r in seq_len(n_rep)) {
dat <- simulate_data_scenario1(N, n_obs)
out_simp <- r3d(X = dat$x, Y_list = dat$y, cutoff = c_cutoff,
method = "simple", p = 1, q_grid = q_levels, boot = FALSE)
out_frech <- r3d(X = dat$x, Y_list = dat$y, cutoff = c_cutoff,
method = "frechet", p = 1, q_grid = q_levels, boot = FALSE)
results_simp[[r]] <- out_simp$tau
results_frech[[r]] <- out_frech$tau
}
simp_mat <- do.call(rbind, results_simp)
frech_mat <- do.call(rbind, results_frech)
avg_bias_simp <- mean(rowMeans(simp_mat - matrix(true_te, nrow = n_rep, ncol = length(q_levels), byrow = TRUE)), na.rm = TRUE)
avg_bias_frech <- mean(rowMeans(frech_mat - matrix(true_te, nrow = n_rep, ncol = length(q_levels), byrow = TRUE)), na.rm = TRUE)
expect_lt(abs(avg_bias_simp), 2)
expect_lt(abs(avg_bias_frech), 2)
})
test_that("Known treatment effect is recovered by both methods (for large enough data)", {
set.seed(1088)
test_data <- create_test_data(n = 1000, sample_size=1000, fuzzy = FALSE)
q_grid <- seq(0.1, 0.9, by = 0.1)
out_simp <- r3d(X = test_data$x, Y_list = test_data$y_list, cutoff = 0,
method = "simple", p = 1, q_grid = q_grid, boot = FALSE)
out_frech <- r3d(X = test_data$x, Y_list = test_data$y_list, cutoff = 0,
method = "frechet", p = 1, q_grid = q_grid, boot = FALSE)
expect_true(mean(abs(out_simp$tau - test_data$true_effect)) < 0.5)
expect_true(mean(abs(out_frech$tau - test_data$true_effect)) < 0.5)
})
################################################################################
# 5) Test edge cases and error handling
################################################################################
test_that("r3d handles very small samples with error", {
x <- c(-0.5, 0.5, -0.2, 0.2)
y_list <- list(rnorm(5, 1), rnorm(5, 3), rnorm(5, 1.5), rnorm(5, 2.5))
expect_warning(
r3d(X = x, Y_list = y_list, cutoff = 0, method = "simple", p = 1)
)
})
test_that("r3d errors correctly when fuzzy=TRUE but T=NULL", {
set.seed(110)
test_data <- create_test_data(n = 20, sample_size = 10, fuzzy = FALSE)
expect_error(
r3d(X = test_data$x, Y_list = test_data$y_list, cutoff = 0, method = "simple", fuzzy = TRUE, T = NULL)
)
})
test_that("r3d handles empty distributions in Y_list", {
set.seed(111)
test_data <- create_test_data(n = 20, sample_size = 10, fuzzy = FALSE)
y_list <- test_data$y_list
y_list[[5]] <- numeric(0)
expect_error(
result <- r3d(X = test_data$x, Y_list = y_list, cutoff = 0, method = "simple", p = 1)
)
})
################################################################################
# 6) Test summary.r3d() and plot.r3d() methods
################################################################################
test_that("summary.r3d() and plot.r3d() work properly", {
skip_on_cran()
set.seed(111)
test_data <- create_test_data(n = 40, sample_size = 20, fuzzy = FALSE)
out <- r3d(X = test_data$x, Y_list = test_data$y_list, cutoff = 0,
method = "simple", p = 1,
q_grid = seq(0.25, 0.75, by = 0.25),
boot = TRUE, boot_reps = 5, test = "none")
summ_out <- capture.output(summary(out))
expect_match(summ_out, "Method:", all = FALSE)
expect_match(summ_out, "Polynomial order p:", all = FALSE)
expect_match(summ_out, "Aggregated distributional effects:", all = FALSE)
print_out <- capture.output(print(out))
expect_match(print_out, "R3D: Regression Discontinuity with Distributional Outcomes", all = FALSE)
pdf(NULL)
expect_silent(plot(out, main = "Test Plot R3D"))
dev.off()
})
###############################################################################
# 7) Multiple tests
###############################################################################
test_that("r3d() works with multiple test types", {
set.seed(2001)
test_data <- create_test_data(n = 40, sample_size = 20, fuzzy = FALSE)
# Run r3d with both nullity and homogeneity tests
out_multi_test <- r3d(X = test_data$x, Y_list = test_data$y_list, cutoff = 0,
method = "simple", p = 1, boot = TRUE, boot_reps = 10,
test = c("nullity", "homogeneity"), alpha = 0.2)
# Check that we have test results for both types
expect_true(!is.null(out_multi_test$boot_out$test_results))
expect_true("nullity" %in% names(out_multi_test$boot_out$test_results))
expect_true("homogeneity" %in% names(out_multi_test$boot_out$test_results))
# Check that each test type has valid results
for (test_type in c("nullity", "homogeneity")) {
test_results <- out_multi_test$boot_out$test_results[[test_type]]
expect_true(length(test_results) > 0)
# Get the first range result
first_range <- test_results[[1]]
# Check that it has the expected components
expect_true(all(c("test_stat", "test_crit_val", "p_value") %in% names(first_range)))
expect_true(is.numeric(first_range$test_stat))
expect_true(is.numeric(first_range$test_crit_val))
expect_true(is.numeric(first_range$p_value))
expect_true(first_range$p_value >= 0 && first_range$p_value <= 1)
}
})
test_that("r3d() works with test_ranges for specific quantile subsets", {
set.seed(2002)
test_data <- create_test_data(n = 40, sample_size = 20, fuzzy = FALSE)
q_grid <- seq(0.1, 0.9, by = 0.1)
# Test on a specific range [0.2, 0.7]
out_range <- r3d(X = test_data$x, Y_list = test_data$y_list, cutoff = 0,
method = "simple", p = 1, q_grid = q_grid, boot = TRUE, boot_reps = 10,
test = "nullity", test_ranges = list(c(0.2, 0.7)), alpha = 0.2)
# Check that test results are for the specified range
expect_true(!is.null(out_range$boot_out$test_results))
expect_true("nullity" %in% names(out_range$boot_out$test_results))
range_results <- out_range$boot_out$test_results$nullity
expect_true(length(range_results) > 0)
# Get the range name (should be something like [0.20, 0.70])
range_name <- names(range_results)[1]
expect_match(range_name, "\\[0\\.2.*, 0\\.7.*\\]")
# Test results should be calculated on the specified range
range_result <- range_results[[range_name]]
expect_true(all(c("range", "test_stat", "test_crit_val", "p_value") %in% names(range_result)))
expect_equal(range_result$range[1], 0.2)
expect_equal(range_result$range[2], 0.7)
})
test_that("r3d() works with multi-point ranges that get expanded into pairs", {
set.seed(2003)
test_data <- create_test_data(n = 40, sample_size = 20, fuzzy = FALSE)
q_grid <- seq(0.1, 0.9, by = 0.1)
# Test with a range specified as c(0.2, 0.5, 0.8)
# This should result in testing on [0.2, 0.5] and [0.5, 0.8]
out_multi_range <- r3d(X = test_data$x, Y_list = test_data$y_list, cutoff = 0,
method = "simple", p = 1, q_grid = q_grid, boot = TRUE, boot_reps = 10,
test = "homogeneity", test_ranges = list(c(0.2, 0.5, 0.8)), alpha = 0.2)
# Check that test results contain two ranges
expect_true(!is.null(out_multi_range$boot_out$test_results))
expect_true("homogeneity" %in% names(out_multi_range$boot_out$test_results))
range_results <- out_multi_range$boot_out$test_results$homogeneity
expect_equal(length(range_results), 2)
# Check that the range names match the expected ranges
range_names <- names(range_results)
expect_true(any(grepl("\\[0\\.2.*, 0\\.5.*\\]", range_names)))
expect_true(any(grepl("\\[0\\.5.*, 0\\.8.*\\]", range_names)))
})
test_that("r3d() works with multiple test types and multiple ranges", {
set.seed(2004)
test_data <- create_test_data(n = 40, sample_size = 20, fuzzy = FALSE)
q_grid <- seq(0.1, 0.9, by = 0.1)
# Test with both nullity and homogeneity tests on two different ranges
out_complex <- r3d(X = test_data$x, Y_list = test_data$y_list, cutoff = 0,
method = "simple", p = 1, q_grid = q_grid, boot = TRUE, boot_reps = 10,
test = c("nullity", "homogeneity"),
test_ranges = list(c(0.2, 0.4), c(0.6, 0.8)), alpha = 0.2)
# Check that test results contain both test types
expect_true(!is.null(out_complex$boot_out$test_results))
expect_true(all(c("nullity", "homogeneity") %in% names(out_complex$boot_out$test_results)))
# Check that each test type has results for both ranges
for (test_type in c("nullity", "homogeneity")) {
range_results <- out_complex$boot_out$test_results[[test_type]]
expect_equal(length(range_results), 2)
# Check that the range names match the expected ranges
range_names <- names(range_results)
expect_true(any(grepl("\\[0\\.2.*, 0\\.4.*\\]", range_names)))
expect_true(any(grepl("\\[0\\.6.*, 0\\.8.*\\]", range_names)))
}
# There should be a total of 4 test results (2 test types Ã— 2 ranges)
total_tests <- sum(sapply(out_complex$boot_out$test_results, length))
expect_equal(total_tests, 4)
})
test_that("r3d() handles invalid test_ranges appropriately", {
set.seed(2005)
test_data <- create_test_data(n = 40, sample_size = 20, fuzzy = FALSE)
q_grid <- seq(0.1, 0.9, by = 0.1)
# Test with a range outside q_grid
expect_error(
r3d(X = test_data$x, Y_list = test_data$y_list, cutoff = 0,
method = "simple", p = 1, q_grid = q_grid, boot = TRUE, boot_reps = 10,
test = "nullity", test_ranges = list(c(0, 0.2)), alpha = 0.2)
)
# Test with a range containing only one value
expect_error(
r3d(X = test_data$x, Y_list = test_data$y_list, cutoff = 0,
method = "simple", p = 1, q_grid = q_grid, boot = TRUE, boot_reps = 10,
test = "nullity", test_ranges = list(c(0.3)), alpha = 0.2)
)
# Test with a range outside [0,1]
expect_error(
r3d(X = test_data$x, Y_list = test_data$y_list, cutoff = 0,
method = "simple", p = 1, q_grid = q_grid, boot = TRUE, boot_reps = 10,
test = "nullity", test_ranges = list(c(-0.1, 1.1)), alpha = 0.2)
)
})
test_that("summary.r3d() properly displays multiple test results", {
set.seed(2006)
test_data <- create_test_data(n = 40, sample_size = 20, fuzzy = FALSE)
q_grid <- seq(0.1, 0.9, by = 0.1)
out_multi <- r3d(X = test_data$x, Y_list = test_data$y_list, cutoff = 0,
method = "simple", p = 1, q_grid = q_grid, boot = TRUE, boot_reps = 10,
test = c("nullity", "homogeneity"),
test_ranges = list(c(0.2, 0.8)), alpha = 0.2)
# Capture the summary output
summary_output <- capture.output(summary(out_multi))
# Check for multiple test results in the output
expect_true(any(grepl("NULLITY TESTS:", summary_output, fixed = TRUE)))
expect_true(any(grepl("HOMOGENEITY TESTS:", summary_output, fixed = TRUE)))
expect_true(any(grepl("Range \\[0\\.2", summary_output)))
# Check for test statistics, critical values, and p-values
expect_true(any(grepl("Test statistic:", summary_output, fixed = TRUE)))
expect_true(any(grepl("Critical value:", summary_output, fixed = TRUE)))
expect_true(any(grepl("P-value:", summary_output, fixed = TRUE)))
})
###############################################################################
# 8) Visual validation checks for numeric testing
###############################################################################
test_that("Visual validation with known treatment effects", {
skip_on_cran()
set.seed(737)
# Constant-effect data
test_data <- create_test_data(n = 300, sample_size = 500, fuzzy = FALSE)
q_grid <- seq(0.1, 0.9, by = 0.1)
out_constant <- r3d(X = test_data$x, Y_list = test_data$y_list, cutoff = 0, method = "frechet",
kernel_fun = "triangular", p = 2, s = 1, q_grid = q_grid,
boot = TRUE, boot_reps = 1000, test = "homogeneity")
expected_constant <- rep(test_data$true_effect, length(q_grid))
# Heterogeneous-effect data
hetero_data <- create_hetero_effect_data(n = 500, sample_size = 1000)
out_hetero <- r3d(X = hetero_data$x, Y_list = hetero_data$y_list, cutoff = 0, method = "frechet",
kernel_fun = "triangular", p = 2, s = 1, q_grid = q_grid,
boot = TRUE, boot_reps = 1000, test = "homogeneity")
q_strs <- sub("0+$", "", sprintf("%.2f", q_grid))
expected_hetero <- as.numeric(hetero_data$true_effects[q_strs])
# Print results
cat("\n\n==== VISUAL VALIDATION ====\n\n")
cat("CONSTANT EFFECT MODEL:\n")
cat("The effect is exactly:", test_data$true_effect, "for all q.\n\n")
res_const <- data.frame(
Quantile = q_grid,
Estimated = round(out_constant$tau, 2),
Expected = round(expected_constant, 2),
Bias = round(out_constant$tau - expected_constant, 2),
LowerCB = round(out_constant$boot_out$cb_lower, 2),
UpperCB = round(out_constant$boot_out$cb_upper, 2)
)
print(head(res_const, 10))
cat("...\n")
cat("Homogeneity test p-value:", out_constant$boot_out$p_value, "\n")
cat("(Should be > 0.05 if effect is truly constant.)\n\n")
cat("HETEROGENEOUS EFFECT MODEL:\n")
cat("(We used a big replicate to approximate these differences)\n\n")
res_hetero <- data.frame(
Quantile = q_grid,
Estimated = round(out_hetero$tau, 2),
Expected = round(expected_hetero, 2),
Bias = round(out_hetero$tau - expected_hetero, 2),
LowerCB = round(out_hetero$boot_out$cb_lower, 2),
UpperCB = round(out_hetero$boot_out$cb_upper, 2)
)
print(head(res_hetero, 10))
cat("...\n")
cat("Homogeneity test p-value:", out_hetero$boot_out$p_value, "\n")
cat("(Should be < 0.05 since effect varies by quantile.)\n\n")
# Plots
par(mfrow = c(1, 2))
plot(out_constant, main = "Constant Treatment Effect (Frechet)", col = "blue", lwd = 2, ylim = c(0, 4))
abline(h = test_data$true_effect, col = "red", lty = 2, lwd = 2)
legend("topright", c("Estimated", "True (3)"), col = c("blue", "red"), lty = c(1, 2), lwd = 2)
plot(out_hetero, main = "Heterogeneous Treatment Effect (Frechet)", col = "blue", lwd = 2)
lines(q_grid, expected_hetero, col = "red", lty = 2, lwd = 2)
legend("topright", c("Estimated", "Approx. True"), col = c("blue", "red"), lty = c(1, 2), lwd = 2)
expect_true(TRUE)
})
###############################################################################
# 9) Gini coefficient tests
###############################################################################
test_that("calculate_gini_from_quantile correctly measures inequality", {
# Perfect equality (constant quantile function)
equal_quantiles <- seq(0.1, 0.9, by = 0.1)
equal_values <- rep(10, length(equal_quantiles))
expect_equal(calculate_gini_from_quantile(equal_quantiles, equal_values), 0)
# Perfect inequality (step function at the very end)
unequal_quantiles <- seq(0, 1, by = 0.1)
unequal_values <- c(rep(0, 10), 100)
expect_equal(round(calculate_gini_from_quantile(unequal_quantiles, unequal_values), 2), 0.9)
# Linear quantile function (corresponds to uniform distribution)
# For a uniform distribution, the Gini coefficient should be 1/3
uniform_quantiles <- seq(0, 1, by = 0.01)
uniform_values <- uniform_quantiles * 100  # Q(p) = 100p for uniform on [0,100]
expect_equal(round(calculate_gini_from_quantile(uniform_quantiles, uniform_values), 2), 0.33)
# Handle negative values
negative_quantiles <- seq(0.1, 0.9, by = 0.1)
negative_values <- c(-50, -40, -30, -20, -10, 0, 10, 20, 30)
expect_true(!is.na(calculate_gini_from_quantile(negative_quantiles, negative_values)))
# Handle empty or insufficient data
expect_true(is.na(calculate_gini_from_quantile(c(), c())))
expect_true(is.na(calculate_gini_from_quantile(0.5, 100)))
})
test_that("r3d works with gini test using quantile functions", {
set.seed(3001)
# Create test data with different distributions above/below cutoff
n <- 100
X <- runif(n, -1, 1)
# Create distributions with different inequality levels
Y_list <- lapply(1:n, function(i) {
if (X[i] < 0) {
# More equal distribution below cutoff
rnorm(50, mean = 5, sd = 1)
} else {
# More unequal distribution above cutoff (mixture)
c(rnorm(25, mean = 3, sd = 0.5),
rnorm(25, mean = 8, sd = 1.5))
}
})
# Run r3d with Gini test
out_gini <- r3d(X = X, Y_list = Y_list, cutoff = 0,
method = "simple", p = 1, boot = TRUE, boot_reps = 20,
test = "gini", alpha = 0.1)
# Check results structure
expect_true(!is.null(out_gini$boot_out$test_results))
expect_true("gini" %in% names(out_gini$boot_out$test_results))
# Check Gini test results format
gini_results <- out_gini$boot_out$test_results$gini
expect_true(length(gini_results) > 0)
# Get the result (should be under "full_sample")
gini_result <- gini_results[["full_sample"]]
# Check that it has the expected components
expect_true(all(c("gini_above", "gini_below", "gini_diff",
"test_stat", "test_crit_val", "p_value",
"bootstrap_diffs") %in% names(gini_result)))
# Both Gini coefficients should be between 0 and 1
expect_true(gini_result$gini_above >= 0 && gini_result$gini_above <= 1)
expect_true(gini_result$gini_below >= 0 && gini_result$gini_below <= 1)
# The bootstrap distribution should have the right length
expect_equal(length(gini_result$bootstrap_diffs), 20)
# Check that the Gini coefficients are different - distributions were created to be different
expect_true(abs(gini_result$gini_diff) > 0.05)
})
test_that("r3d works with multiple tests including gini", {
set.seed(3002)
n <- 80
X <- runif(n, -1, 1)
# Create distributions with both different means and different inequality
Y_list <- lapply(1:n, function(i) {
if (X[i] < 0) {
# Lower mean, more equal
rnorm(40, mean = 5, sd = 1)
} else {
# Higher mean, more unequal
c(rnorm(20, mean = 6, sd = 0.8),
rnorm(20, mean = 9, sd = 2))
}
})
# Run r3d with multiple tests
out_multi <- r3d(X = X, Y_list = Y_list, cutoff = 0,
method = "simple", p = 1, boot = TRUE, boot_reps = 15,
test = c("nullity", "homogeneity", "gini"), alpha = 0.1)
# Check results structure
expect_true(!is.null(out_multi$boot_out$test_results))
expect_true(all(c("nullity", "homogeneity", "gini") %in% names(out_multi$boot_out$test_results)))
# Capture the summary output
summary_output <- capture.output(summary(out_multi))
# Check for test results in the output
expect_true(any(grepl("NULLITY TESTS:", summary_output, fixed = TRUE)))
expect_true(any(grepl("HOMOGENEITY TESTS:", summary_output, fixed = TRUE)))
expect_true(any(grepl("GINI TESTS:", summary_output, fixed = TRUE)))
# Check for Gini-specific output
expect_true(any(grepl("Gini coefficient above cutoff:", summary_output, fixed = TRUE)))
expect_true(any(grepl("Gini coefficient below cutoff:", summary_output, fixed = TRUE)))
expect_true(any(grepl("Difference in Gini coefficients:", summary_output, fixed = TRUE)))
})
?r3d_bwselect
library(R3D)
?r3d_bwselect
devtools::document()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
#****************************************************************************************************************************************************
# MASTER SCRIPT: DISTRIBUTIONAL REGRESSION DISCONTINUITY DESIGN
# David Van Dijcke
#****************************************************************************************************************************************************
#****************************************************************************************************************************************************
#****************************************************************************************************************************************************
#****************************************************************************************************************************************************
#****************************************************************************************************************************************************
#### SET OVERALL PARAMETERS ####
#### SET PATHS ####
if (!require("here", character.only=T)) {install.packages("here", dependencies=TRUE)}; require("here")
codeDir <- here::here()
setwd(codeDir) # sets cd to program directory
dir <- sub("/[^/]+$", "", codeDir)# get main directory
dataIn <- file.path(dir, "data", "in")
dataBy <- file.path(dir, "data", "by")
dataOut <- file.path(dir, "data", "out")
overleaf <- "/Users/davidvandijcke/Dropbox (University of Michigan)/Apps/Overleaf/r3d"
tabs <- file.path(overleaf, "tabs")
figs <- file.path(overleaf, "figs")
#### USER-WRITTEN FUNCTIONS ####
source("utils.R")
?quantile
#### robustness: use same-year income
data_offset <- prepData(year_offset=0)
?match.call
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
remove.packages("modelsummary")
source("r3d_simulation_scenarios.R")
#****************************************************************************************************************************************************
# MASTER SCRIPT: DISTRIBUTIONAL REGRESSION DISCONTINUITY DESIGN
# David Van Dijcke
#****************************************************************************************************************************************************
#****************************************************************************************************************************************************
#****************************************************************************************************************************************************
#****************************************************************************************************************************************************
#****************************************************************************************************************************************************
#### SET OVERALL PARAMETERS ####
#### SET PATHS ####
if (!require("here", character.only=T)) {install.packages("here", dependencies=TRUE)}; require("here")
codeDir <- here::here()
setwd(codeDir) # sets cd to program directory
dir <- sub("/[^/]+$", "", codeDir)# get main directory
dataIn <- file.path(dir, "data", "in")
dataBy <- file.path(dir, "data", "by")
dataOut <- file.path(dir, "data", "out")
overleaf <- "/Users/davidvandijcke/Dropbox (University of Michigan)/Apps/Overleaf/r3d"
tabs <- file.path(overleaf, "tabs")
figs <- file.path(overleaf, "figs")
#### USER-WRITTEN FUNCTIONS ####
source("utils.R")
#****************************************************************************************************************************************************
# MASTER SCRIPT: DISTRIBUTIONAL REGRESSION DISCONTINUITY DESIGN
# David Van Dijcke
#****************************************************************************************************************************************************
#****************************************************************************************************************************************************
#****************************************************************************************************************************************************
#****************************************************************************************************************************************************
#****************************************************************************************************************************************************
#### SET OVERALL PARAMETERS ####
#### SET PATHS ####
if (!require("here", character.only=T)) {install.packages("here", dependencies=TRUE)}; require("here")
codeDir <- here::here()
setwd(codeDir) # sets cd to program directory
dir <- sub("/[^/]+$", "", codeDir)# get main directory
dataIn <- file.path(dir, "data", "in")
dataBy <- file.path(dir, "data", "by")
dataOut <- file.path(dir, "data", "out")
overleaf <- "/Users/davidvandijcke/Dropbox (University of Michigan)/Apps/Overleaf/r3d"
tabs <- file.path(overleaf, "tabs")
figs <- file.path(overleaf, "figs")
#### USER-WRITTEN FUNCTIONS ####
source("utils.R")
#****************************************************************************************************************************************************
# MASTER SCRIPT: DISTRIBUTIONAL REGRESSION DISCONTINUITY DESIGN
# David Van Dijcke
#****************************************************************************************************************************************************
#****************************************************************************************************************************************************
#****************************************************************************************************************************************************
#****************************************************************************************************************************************************
#****************************************************************************************************************************************************
#### SET OVERALL PARAMETERS ####
#### SET PATHS ####
if (!require("here", character.only=T)) {install.packages("here", dependencies=TRUE)}; require("here")
codeDir <- here::here()
setwd(codeDir) # sets cd to program directory
dir <- sub("/[^/]+$", "", codeDir)# get main directory
dataIn <- file.path(dir, "data", "in")
dataBy <- file.path(dir, "data", "by")
dataOut <- file.path(dir, "data", "out")
overleaf <- "/Users/davidvandijcke/Dropbox (University of Michigan)/Apps/Overleaf/r3d"
tabs <- file.path(overleaf, "tabs")
figs <- file.path(overleaf, "figs")
#### USER-WRITTEN FUNCTIONS ####
source("utils.R")
